*What is NgRx?
    NgRx is a state management library for Angular inspired by Redux (a popular state management library in React). 
    It helps you manage the state of your application in a predictable way using a unidirectional data flow.

*Core Concepts of NgRx

State:      The single source of truth for your application's data.
Actions:    Events that describe something that happened in the application (e.g., "Load Users").
Reducers:   Pure functions that take the current state and an action, and return a new state.
Selectors:  Functions that allow you to query and derive data from the state.
Effects:    Side effects (e.g., API calls) that occur in response to actions.
Store:      The central hub that holds the application state and provides methods to interact with it.


1. Install NgRx Packages

    npm install @ngrx/store @ngrx/effects @ngrx/entity @ngrx/store-devtools


2. Define the User State

    export interface UserState2{
        id:number|null;
        name:string|null;
        email:string|null;
        role:string|null;
        permissions:string[]|null;
        profilepicture:string|null;
    }

    export const initialStateUserData:UserState2 = {
        id:null,
        name:null,
        email:null,
        role:null,
        permissions:[],
        profilepicture:null
    }



3. Create User Actions

    import { createAction, props } from "@ngrx/store";

    export interface SaveUserDataPayload {
        id: number;
        name: string;
        email: string;
        role: string;
        permissions: string[];
        profilepicture: string;
    }
    
    export const saveUserData = createAction(
        '[UserData] Save User Data',
        props<SaveUserDataPayload>() // Use the interface here
    );



3. Create User Reducer

    import { createReducer, on } from "@ngrx/store";
    import { initialStateUserData } from "./userdata.state";
    import { saveUserData } from "./userdata.actions";

    export const userdataReducer = createReducer(
        initialStateUserData,
        on(saveUserData, (state, {id,name,email,role,permissions,profilepicture}) => ({
            id,
            name,
            email,
            role,
            permissions,
            profilepicture
        }))
    )


4. app.config.ts

    providers: [
        provideStore({userdata:userdataReducer}),
    ]



5. Dispatch Actions

    private userstore = inject(Store<{userdata:UserState2}>);
    userdata$ = this.userstore.select(state => state.userdata);

    ngOnInit(){
        const userdatas:SaveUserDataPayload = {
        id: 100,
        name: "Bejesh",
        email: "bejesh@gmail.com",
        role: "Student",
        permissions: ["Attendance","ManageAttendance"],
        profilepicture: "BejeshPic"
        };
        this.userstore.dispatch(saveUserData(userdatas));

        this.userdata$.subscribe(data => console.log(data));
    }

    onSelectUser(userId:number){
        this.store.dispatch(selectUser({userId}));
    }

    <ul>
        <li>{{userdata$ | async | json}}</li>
    </ul>