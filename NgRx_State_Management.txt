*What is NgRx?
    NgRx is a state management library for Angular inspired by Redux (a popular state management library in React). 
    It helps you manage the state of your application in a predictable way using a unidirectional data flow.

*Core Concepts of NgRx

State:      The single source of truth for your application's data.
Actions:    Events that describe something that happened in the application (e.g., "Load Users").
Reducers:   Pure functions that take the current state and an action, and return a new state.
Selectors:  Functions that allow you to query and derive data from the state.
Effects:    Side effects (e.g., API calls) that occur in response to actions.
Store:      The central hub that holds the application state and provides methods to interact with it.


1. Install NgRx Packages

    npm install @ngrx/store @ngrx/effects @ngrx/entity @ngrx/store-devtools


2. Define the User State

    export interface User{
        id:number;
        name:string;
        email:string;
    }

    export interface UserState{
        users:User[];
        selectedUser: User | null;
    }

    export const initialState:UserState = {
        users:[],
        selectedUser:null,
    };



3. Create User Actions

    import { createAction, props } from "@ngrx/store";
    import { User } from "./user.state";

    export const loadUsers = createAction('[User] Load Users');
    export const loadUsersSuccess = createAction('[User] Load Users Success', props<{ users: User[] }>());
    export const selectUser = createAction('[User] Select User', props<{ userId:number }>());


3. Create User Reducer

    import { createReducer, on } from "@ngrx/store";
    import { initialState } from "./user.state";
    import { loadUsersSuccess, selectUser } from "./user.actions";

    export const userReducer = createReducer(
        initialState,
        on(loadUsersSuccess, (state, {users})=>({...state, users})),
        on(selectUser, (state, {userId})=>({...state, selectedUser: state.users.find(user => user.id===userId) || null, }))
    )


4. app.config.ts

    providers: [
        provideStore({user:userReducer}),
    ]



5. Dispatch Actions

    private store = inject(Store<{user:UserState}>);

    users$= this.store.select(state => state.user.users);
    selectedUser$ = this.store.select(state => state.user.selectedUser);

    ngOnInit(){
        const users:User[] = [
        {id:1, name:'John Doe', email:'john@gmail.com'},
        {id:2, name:'Jane Smith', email:'jane@gmail.com'},
        ];

        this.store.dispatch(loadUsersSuccess({users}));
    }

    onSelectUser(userId:number){
        this.store.dispatch(selectUser({userId}));
    }